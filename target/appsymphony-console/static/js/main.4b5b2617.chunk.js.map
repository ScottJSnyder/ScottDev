{"version":3,"sources":["history.js","NavigationList.js","Home.js","Apps.js","Artifacts.js","Deployments.js","Jobs.js","DxComponent.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","navigation","id","text","icon","filePath","NavigationList","loadView","e","history","push","addedItems","props","stateHandler","isDrawerOpen","Fragment","items","width","selectionMode","onSelectionChanged","this","React","PureComponent","Home","Component","Apps","Artifacts","Deployments","dataSource","AspNetData","key","loadUrl","Jobs","bind","state","selectedRowExId","selectedRowAppId","selectedRowiterationCount","elementAttr","selection","mode","showBorders","hoverStateEnabled","keyExpr","defaultPageSize","showPageSizeSelector","allowedPageSizes","showInfo","visible","highlightCaseSensitive","dataField","caption","showAppInfo","direction","height","ratio","className","data","selectedRowsData","setState","executionId","appId","iterationCount","DxComponent","renderList","newState","buttonOptions","onClick","widget","options","location","minSize","revealMode","openedStateMode","render","opened","exact","path","component","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b5b2617.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\"\r\n \r\nexport default createBrowserHistory()","import React from \"react\";\r\nimport List from \"devextreme-react/list\";\r\nimport history from \"./history\";\r\n \r\nconst navigation = [\r\n  { id: 1, text: \"Home\", icon: \"home\", filePath: \"home\" },\r\n  { id: 2, text: \"Apps\", icon: \"product\", filePath: \"apps\" },\r\n  { id: 3, text: \"Artifacts\", icon: \"activefolder\", filePath: \"artifacts\" },\r\n  { id: 4, text: \"Deployments\", icon: \"share\", filePath: \"deployments\" },\r\n  { id: 5, text: \"Jobs\", icon: \"preferences\", filePath: \"jobs\" }\r\n\r\n];\r\n \r\nclass NavigationList extends React.PureComponent {\r\n    loadView = (e) => {\r\n        history.push(e.addedItems[0].filePath);\r\n        this.props.stateHandler({ isDrawerOpen: false });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <List\r\n                    items={navigation}\r\n                    width={200} \r\n                    selectionMode=\"single\"\r\n                    onSelectionChanged={this.loadView} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default NavigationList;","import React from \"react\";\r\n \r\nclass Home extends React.Component {\r\n    render() {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\nexport default Home;","import React from \"react\";\r\n \r\nclass Apps extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Apps</div>\r\n        );\r\n    }\r\n}\r\nexport default Apps;","import React from \"react\";\r\n \r\nclass Artifacts extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Artifacts!?</div>\r\n        );\r\n    }\r\n}\r\nexport default Artifacts;","import React from \"react\";\r\n \r\nclass Deployments extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Deployments</div>\r\n        );\r\n    }\r\n}\r\nexport default Deployments;","import React from 'react';\r\n//import { Drawer, Toolbar } from 'devextreme-react';\r\nimport DataGrid, { Column, SearchPanel, Pager, Paging } from 'devextreme-react/data-grid';\r\nimport * as AspNetData from 'devextreme-aspnet-data-nojquery';\r\nimport Box, { Item } from 'devextreme-react/box';\r\n//import { HashRouter as Router } from 'react-router-dom';\r\n\r\nconst dataSource = AspNetData.createStore({\r\n    key: 'executionId',\r\n    loadUrl: 'https://10.3.1.48:8080/execution/status'\r\n  });\r\n \r\nclass Jobs extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n    \r\n        this.onSelectionChanged = this.onSelectionChanged.bind(this);      \r\n        this.state = {\r\n    \r\n          selectedRowExId: '',\r\n          selectedRowAppId: '',\r\n          selectedRowiterationCount: ''\r\n        };\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n<div>Jobs</div>\r\n<React.Fragment>\r\n<DataGrid\r\n    elementAttr ={{\r\n      id: 'gridContainer'\r\n    }}\r\n    dataSource={dataSource}\r\n    selection={{ mode: 'single' }}\r\n    showBorders={true}\r\n    hoverStateEnabled={true}\r\n    keyExpr=\"executionId\"\r\n    onSelectionChanged={this.onSelectionChanged}\r\n    >\r\n<Paging defaultPageSize={10} />\r\n\r\n<Pager\r\nshowPageSizeSelector={true}\r\nallowedPageSizes={[5, 10, 20]}\r\nshowInfo={true} />\r\n<SearchPanel visible={true} highlightCaseSensitive={true} />\r\n<Column dataField=\"executionName\" caption=\"App Name\" width=\"300\" />\r\n<Column dataField=\"executionPhase\" caption=\"Execution Phase\" width=\"150\" />\r\n<Column dataField=\"appId\" caption=\"App ID\" width=\"400\" />\r\n<Column dataField=\"applicationStart\" caption=\"Start\" width=\"200\"/>\r\n<Column dataField=\"applicationStop\" caption=\"Stop\" width=\"200\">\r\n</Column>\r\n</DataGrid>\r\n{\r\nthis.state.showAppInfo &&\r\n<Box\r\n      direction=\"row\"\r\n      height={100}>\r\n      <Item ratio={1}>\r\n          <div className=\"box-item orange\"><strong> Execution Id </strong></div>\r\n\r\n<div id=\"employee-info\">\r\n  <p className=\"employee-notes\">{this.state.selectedRowExId}</p>\r\n</div>\r\n      </Item>\r\n      <Item ratio={1}>\r\n          <div className=\"box-item yellow\"><strong> App Id </strong></div>\r\n\r\n<div id=\"employee-info\">\r\n  <p className=\"employee-notes\"> {this.state.selectedRowAppId}</p>\r\n</div>\r\n      </Item>\r\n\r\n      <Item ratio={1}>\r\n          <div className=\"box-item yellow\"> <strong>Iteration Count </strong></div>\r\n\r\n<div id=\"employee-info\">\r\n  <p className=\"employee-notes\"> {this.state.selectedRowiterationCount}</p>\r\n</div>\r\n      </Item>\r\n\r\n  </Box>\r\n}\r\n</React.Fragment>\r\n            </div>\r\n          );\r\n    }\r\n    onSelectionChanged({ selectedRowsData }) {\r\n        const data = selectedRowsData[0];\r\n    \r\n        this.setState({\r\n          showAppInfo: !!data,\r\n          selectedRowExId: data && data.executionId,\r\n          selectedRowAppId: data && data.appId,\r\n          selectedRowiterationCount: data && data.iterationCount,\r\n        });\r\n      }\r\n}\r\nexport default Jobs;","import React from \"react\";\r\n \r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport \"./DxComponent.css\";\r\n \r\nimport { Drawer } from \"devextreme-react/drawer\";\r\nimport { Toolbar, Item } from \"devextreme-react/toolbar\";\r\nimport NavigationList from \"./NavigationList\";\r\n \r\n//import { Router, Route } from \"react-router-dom\";\r\nimport {\r\n    BrowserRouter,\r\n    Router,\r\n    Link,\r\n    Route,\r\n    Switch\r\n} from 'react-router-dom';\r\nimport Home from \"./Home\";\r\nimport Apps from \"./Apps\";\r\nimport Artifacts from \"./Artifacts\";\r\nimport Deployments from \"./Deployments\";\r\nimport Jobs from \"./Jobs\";\r\n\r\nimport history from \"./history\";\r\n \r\nclass DxComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n \r\n        this.state = {\r\n            isDrawerOpen: false\r\n        };\r\n        this.buttonOptions = {\r\n            icon: \"menu\",\r\n            onClick: () => {\r\n                this.setState({ isDrawerOpen: !this.state.isDrawerOpen });\r\n            }\r\n        };\r\n    }\r\n \r\n    renderList = () => {\r\n        const stateHandler = (newState) => this.setState(newState);\r\n        return (\r\n            <NavigationList stateHandler={stateHandler} />\r\n        );\r\n    }\r\n \r\n    render() {\r\n        return (\r\n\r\n            <React.Fragment>\r\n                <Toolbar id=\"toolbar\">\r\n                    <Item \r\n                        widget=\"dxButton\" \r\n                        options={this.buttonOptions} \r\n                        location=\"before\" /> \r\n                </Toolbar> \r\n                \r\n                <Drawer\r\n                    minSize={37}\r\n                    height={600}\r\n                    revealMode=\"expand\"\r\n                    openedStateMode=\"overlap\"\r\n                    render={this.renderList}\r\n                    opened={this.state.isDrawerOpen} >\r\n                    <div id=\"view\">\r\n                    <Router history={history}>\r\n                            <div>\r\n                                <Route exact path=\"/\" component={Home} />\r\n                                <Route exact path=\"/home\" component={Home} />\r\n                                <Route exact path=\"/apps\" component={Apps} />\r\n                                <Route exact path=\"/artifacts\" component={Artifacts} />\r\n                                <Route exact path=\"/deployments\" component={Deployments} />\r\n                                <Route exact path=\"/jobs\" component={Jobs} />\r\n                            </div>\r\n                            </Router>\r\n                    </div>\r\n                </Drawer>\r\n                \r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default DxComponent;","import 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.light.css';\nimport React, { Component } from \"react\";\nimport DxComponent from \"./DxComponent\";\n \nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <DxComponent />\n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}